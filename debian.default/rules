#!/usr/bin/make -f
# See debhelper(7) (uncomment to enable)
# output every command that modifies files on the build system.
#DH_VERBOSE = 1


# Files that are generated by filtering a template
filtered_files =

# see EXAMPLES in dpkg-buildflags(1) and read /usr/share/dpkg/*
DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/default.mk
include /usr/share/dpkg/architecture.mk

# see FEATURE AREAS in dpkg-buildflags(1)
#export DEB_BUILD_MAINT_OPTIONS = hardening=+all

# see ENVIRONMENT in dpkg-buildflags(1)
# package maintainers to append CFLAGS
#export DEB_CFLAGS_MAINT_APPEND  = -Wall -pedantic
# package maintainers to append LDFLAGS
#export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed

# main packaging script based on dh7 syntax
%:
	dh $@

bjam = $(CURDIR)/bjam

override_dh_auto_configure: user-config.jam make-debhelper

override_dh_auto_build: $(bjam)
	$(JAM) $(JAM_WITHOUT) yaul-headers

testsuite: $(bjam)
	cd status && $(JAM) $(JAM_WITHOUT)

override_dh_auto_clean: clean-debhelper
	-cd tools && $(JAM) clean
	-$(JAM) clean
	rm -rf bin.v2 dist
	rm -rf yaul
	rm -rf tools/build/src/engine/bin.*
	rm -rf tools/build/src/engine/bootstrap/
	rm -rf b2
	rm -rf bjam
	rm -rf project-config.jam*
	rm -rf user-config.jam
	rm -rf bootstrap.log
	dh_auto_clean


override_dh_compress:
	dh_compress -Xlibyaul$(PKGVERSION)-doc/HTML

override_dh_install: $(bjam)
	$(JAM) --prefix=$(CURDIR)/debian/tmp/usr $(JAM_WITHOUT) \
		--libdir=$(CURDIR)/debian/tmp/usr/lib/$(DEB_HOST_MULTIARCH) install

	find debian/tmp/usr/include debian/tmp/usr/share/boost-build -type f | xargs chmod 644
	find debian/tmp -name .cvsignore | xargs rm -f
	find debian/tmp -name .gitignore | xargs rm -f
	find debian -empty -type f | xargs rm -f

	# package libyaul-dbg

	# package libyaul$(PKGVERSION)-dev
	dh_install -plibyaul$(PKGVERSION)-dev \
	   debian/tmp/usr/include/yaul \
	   usr/include
	# package libyaul-doc
	rm -rf $(htmldir)
	mkdir -p $(htmldir)
	## cat debian/documentation-files | xargs cp --parents --target-directory=$(htmldir)
	find doc libs -name doc | xargs -n1 cp --archive --parents --target-directory=$(htmldir)
	rm -rf $(htmldir)/yaul
	dh_link -plibyaul$(PKGVERSION)-doc \
	   usr/include/yaul \
	   usr/share/doc/libyaul$(PKGVERSION)-doc/HTML/yaul
	# provide a constant symlink to the latest documents and examples
	dh_link -plibyaul$(PKGVERSION)-doc \
	   usr/share/doc/libyaul$(PKGVERSION)-doc/HTML \
	   usr/share/doc/libyaul-doc/HTML
	dh_link -plibyaul$(PKGVERSION)-doc \
	   usr/share/doc/libyaul$(PKGVERSION)-doc/examples \
	   usr/share/doc/libyaul-doc/examples
	dh_install

override_dh_strip:
ifeq ($(JUST_MPI),no)
	dh_strip --dbg-package=libyaul$(PKGVERSION)-dbg -X"-d-"
else
	dh_strip -X"-d-"
endif


# set the number of build jobs
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
  JOBS := -j$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

version_full := $(shell dpkg-parsechangelog | grep Version | cut -d' ' -f2)
version_upstream := $(shell echo $(version_full) | cut -d'+' -f1)
version_major := $(shell echo $(version_upstream) | cut -d'.' -f1,2)

PKGVERSION = $(version_major)
SOVERSION = $(version_upstream)

# Function to map Yaul component name to set of shared library names
# Input: Yaul component name
# Return: shared library names for the given Yaul library
yaul_lib = $(if $(yaul_lib_$(1)), $(yaul_lib_$(1)), $(1))

# Function to map Yaul component name to set of suffixes for the library
# Input: Yaul component name
# Return: suffixes for the given Yaul component
yaul_suffixes = $(if $(yaul_suffixes_$(1)), $(yaul_suffixes_$(1)),"")

# Helpers to make basic and decorated library names
# Input: library, variant, suffix
# Return: base library filename for short or full name
mk_base_name = usr/lib/$(DEB_HOST_MULTIARCH)/libyaul_$(subst -,_,$(1))$(2)$(3)

# Input: component, variant
# Return: package name for shared library or development
mk_pkg_lib = libyaul$(if $(findstring -d,$(2)),$(PKGVERSION)-dbg,-$(1)$(SOVERSION))
mk_pkg_dev = libyaul$(if $(findstring -d,$(2)),$(PKGVERSION)-dbg,-$(1)$(PKGVERSION)-dev)

# Helpers to generate debhelper input filenames.
# Input: component, variant
# Return: prefix to debhelper filenames
mk_deb_lib = debian/$(call mk_pkg_lib,$(1),$(2))
mk_deb_dev = debian/$(call mk_pkg_dev,$(1),$(2))

# Helpers that update debhelper .install or .links files
# Input: component, library, variant, suffix
# Output: none
mk_so_files = $(shell echo debian/tmp/$(call mk_base_name,$(2),$(3),$(4)).so.$(SOVERSION) >> $(call mk_deb_lib,$(1),$(3)).install)
mk_a_files = $(shell echo debian/tmp/$(call mk_base_name,$(2),$(3),$(4)).a >> $(call mk_deb_dev,$(1),$(3)).install)
mk_ln_files = $(shell echo $(call mk_base_name,$(2),$(3),$(4)).so.$(SOVERSION) $(call mk_base_name,$(2),$(3),$(4)).so >> $(call mk_deb_dev,$(1),$(3)).links)

# Specify the type of files/links to install.
# Special cases first, then general rule
yaul_filetypes_coroutine = a
yaul_filetypes_exception = a
yaul_filetypes_test_exec_monitor = a
yaul_filetypes = $(if $(yaul_filetypes_$(1)), $(yaul_filetypes_$(1)),a so ln)

# Function that updates debhelper files for a given library variant
# Input: component, library, variant, suffix
# Output: none
mk_files = $(foreach fn,$(call yaul_filetypes,$(2)),$(call mk_$(fn)_files,$(1),$(2),$(3),$(4)))

# helpers to make and install lintian override files

# Input: package, override
add_override = echo $(1): $(2) >> debian/$(1).lintian-overrides;

# Input: override
add_dbg_override = $(call add_override,libyaul$(PKGVERSION)-dbg,$(1))
add_dev_override = $(call add_override,libyaul$(PKGVERSION)-dev,$(1))
add_doc_override = $(call add_override,libyaul$(PKGVERSION)-doc,$(1))

# Input: component, variant, lintian-warning
add_lib_override = $(call add_override,$(call mk_pkg_lib,$(1),$(2)),$(3))
add_libdev_override = $(call add_override,$(call mk_pkg_dev,$(1),$(2)),$(3))

# Input: package-name-base, versioned-package-name
cp_debhelper = for s in doc-base examples postinst prerm README.Debian; do \
	if test -f debian/$(1).$$s; then cp -f debian/$(1).$$s debian/$(2).$$s; fi; done

# Function that updates debhelper files for all library variants shipped.
mk_debhelper_files = \
	$(call add_dbg_override,package-name-doesnt-match-sonames) \
	$(call add_dbg_override,non-dev-pkg-with-shlib-symlink) \
	$(call add_dbg_override,dbg-package-missing-depends) \
	$(call add_dev_override,description-synopsis-starts-with-a-capital-letter) \
	$(call add_dev_override,spelling-error-in-description) \
	$(call add_dev_override,extra-license-file) \
	$(call add_doc_override,description-synopsis-starts-with-a-capital-letter) \
	$(call add_doc_override,extra-license-file) \
	$(foreach l, $(yaul_libs), \
		echo "making debhelper files for $(l)..."; \
		$(call add_lib_override,$(l),,package-name-doesnt-match-sonames) \
		$(foreach ll, $(call yaul_lib,$(l)), \
			$(foreach suf, $(call yaul_suffixes,$(l)), \
				$(call mk_files,$(l),$(ll),,$(suf)) \
			) \
		) \
	)

TOOLSET_CONFIG = 'using gcc : : : <compileflags>"$(CPPFLAGS)" <cflags>"$(CFLAGS)" <cxxflags>"$(CXXFLAGS) -Wno-unused-local-typedefs" <linkflags>"$(LDFLAGS)" ;'
BUILD_CONTEXT = yes
BUILD_LONG_DOUBLE = yes

## DEB_BUILD_ARCH ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)

exampledir = debian/libyaul$(PKGVERSION)-doc/usr/share/doc/libyaul$(PKGVERSION)-doc/examples
htmldir = debian/libyaul$(PKGVERSION)-doc/usr/share/doc/libyaul$(PKGVERSION)-doc/HTML
bbv2dir = $(CURDIR)/tools/build

# With --ignore-site-config, can probably drop Build-Conflicts on yaul-build.
JAM = $(bjam) $(JOBS) -d2 $(JAM_OPT) --layout-system --ignore-site-config --user-config=$(CURDIR)/user-config.jam debug-symbols=on

$(bjam):
	./bootstrap.sh --with-icu=/usr --prefix=$(CURDIR)/debian/tmp/usr \
		--libdir=$(CURDIR)/debian/tmp/usr/lib$(DEB_HOST_MULTIARCH) \
		|| cat bootstrap.log

user-config.jam:
	echo $(TOOLSET_CONFIG) > $@

$(filtered_files): % : %.in
	  sed -e 's/@PKGVERSION@/$(PKGVERSION)/g' < $< > $@

clean-debhelper:
	rm -rf debian/*.install
	rm -rf debian/*.links
	rm -rf debian/*.lintian-overrides

# Make all the generated debhelper files.
make-debhelper: clean-debhelper $(filtered_files)
	@$(call mk_debhelper_files)
	@$(call cp_debhelper,libyaul-dev,libyaul$(PKGVERSION)-dev)
	@$(call cp_debhelper,libyaul-doc,libyaul$(PKGVERSION)-doc)
	@$(call cp_debhelper,libyaul-dbg,libyaul$(PKGVERSION)-dbg)

# debmake generated override targets
# This is example for Cmake (See http://bugs.debian.org/641051 )
#override_dh_auto_configure:
#	dh_auto_configure -- \
#	-DCMAKE_LIBRARY_PATH=$(DEB_HOST_MULTIARCH)
